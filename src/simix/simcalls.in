# Copyright (c) 2014. The SimGrid Team. All rights reserved.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the license (GNU LGPL) which comes with this package.

# CallType handler? name (resulttype,resultcast) (arg0name,arg0type,arg0cast) (arg1name,arg1type,arg1cast)

# CallType must be one of the three:
#
#  - Func: returning a value immediately (within the same scheduling round)
#    examples: all getters that only retrieve informations with no side effect
#
#  - Proc: not returning any value (but doing so immediately) 
#    examples: all setters, *_cancel 
#
#  - Blck: Blocking call that does not return in the same scheduling round.
#    The answer requires some interaction with SURF, even if this can
#    still occure at the same timestamp under some circonstances (eg
#    if the surf_action cannot start because of resources that are down)
#    examples: things that last some time (communicate, execute, mutex_lock)
#
#    In a perfect world, these answers would also be handled by the
#    script, but we are not there yet. Instead, the answer is manually
#    generated in one of the SIMIX_post_*() functions, that are called
#    when we unpack the done and failed actions returned by surf after
#    a surf simulation round. Weird things happen if you forget to
#    answer a given simcall in there...

# Handler? is either "H" if we need to generate a handler or "-" if we should go without handlers

# I wish we could completely remove the handlers as their only use is
# to adapt the interface between the exported symbol that is visible
# by the user applications and the internal symbol that is implemented 
# by the kernel. 
# The only remaining use of that mechanism is to add the caller
# identity as a parameter of internal call, but that could be
# automatized too (eg by having a special parameter type called "self")

# Please note that in addition to completing this file with your new simcall,
# you should complete the libsmx.c file by adding the corresponding function
# (aka. stub). Anyway, if you omit to do it, the invocation of ./simcalls.py will notify you ;)
# If you want to remove an handler, it is important to remove although
# the corresponding code (simcall_HANDLER_name_of_simcall(xxx) (note that comment the code 
# is not sufficient, the python script does not check whether the code is commented or not).
# Last but not the least, you should declare the new simix call in
# ./include/simgrid/simix.h (otherwise you will get a warning at the
# compilation time)

Proc H vm_suspend (void) (ind_vm, void*, sg_host_t)
Proc H vm_resume (void) (ind_vm, void*, sg_host_t)
Proc H vm_shutdown (void) (ind_vm, void*, sg_host_t)
Proc H vm_save (void) (ind_vm, void*, sg_host_t)
Proc H vm_restore (void) (ind_vm, void*, sg_host_t)

Func H process_create (void*) (name, const char*) (code, FPtr, xbt_main_func_t) (data, void*) (hostname, const char*) (kill_time, double) (argc, int) (argv, void*, char**) (properties, void*, xbt_dict_t) (auto_restart, int)
Proc H process_kill (void) (process, void*, smx_process_t)
Proc H process_killall (void) (reset_pid, int)
Proc - process_cleanup (void) (process, void*, smx_process_t)
Blck H process_suspend (void) (process, void*, smx_process_t)
Proc H process_resume (void) (process, void*, smx_process_t)
Proc H process_set_host (void) (process, void*, smx_process_t) (dest, void*, sg_host_t)
Func - process_is_suspended (int) (process, void*, smx_process_t)
Blck H process_join (int) (process, void*, smx_process_t) (timeout, double)
Blck H process_sleep (int) (duration, double)

Func H execution_start (void*, smx_synchro_t) (name, const char*) (flops_amount, double) (priority, double) (bound, double) (affinity_mask, unsigned long)
Func - execution_parallel_start (void*, smx_synchro_t) (name, const char*) (host_nb, int) (host_list, void*, sg_host_t*) (flops_amount, void*, double*) (bytes_amount, void*, double*) (amount, double) (rate, double)
Proc - execution_destroy (void) (execution, void*, smx_synchro_t)
Proc - execution_cancel (void) (execution, void*, smx_synchro_t)
Func - execution_get_remains (double) (execution, void*, smx_synchro_t)
Func - execution_get_state (int, e_smx_state_t) (execution, void*, smx_synchro_t)
Proc - execution_set_priority (void) (execution, void*, smx_synchro_t) (priority, double)
Proc - execution_set_bound (void) (execution, void*, smx_synchro_t) (bound, double)
Proc - execution_set_affinity (void) (execution, void*, smx_synchro_t) (ws, void*, sg_host_t) (mask, unsigned long)
Blck H execution_wait (int) (execution, void*, smx_synchro_t)

Proc - process_on_exit (void) (process, void*, smx_process_t) (fun, FPtr, int_f_pvoid_pvoid_t) (data, void*)
Proc - process_auto_restart_set (void) (process, void*, smx_process_t) (auto_restart, int)
Func H process_restart (void*, smx_process_t) (process, void*, smx_process_t)

Func - rdv_create (void*, smx_mailbox_t) (name, const char*)
Proc - rdv_destroy (void) (rdv, void*, smx_mailbox_t)
Func - rdv_comm_count_by_host (unsigned int) (rdv, void*, smx_mailbox_t) (host, void*, sg_host_t)
Func - rdv_get_head (void*, smx_synchro_t) (rdv, void*, smx_mailbox_t)
Proc - rdv_set_receiver (void) (rdv, void*, smx_mailbox_t) (receiver, void*, smx_process_t)
Func - rdv_get_receiver (void*, smx_process_t) (rdv, void*, smx_mailbox_t)

Func H comm_iprobe (void*, smx_synchro_t) (rdv, void*, smx_mailbox_t) (type, int) (src, int) (tag, int) (match_fun, FPtr, simix_match_func_t) (data, void*)
Blck H comm_send (void)                  (sender, void*, smx_process_t) (rdv, void*, smx_mailbox_t)  (task_size, double) (rate, double) (src_buff, void*) (src_buff_size, size_t) (match_fun, FPtr, simix_match_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (timeout, double)
Func H comm_isend (void*, smx_synchro_t) (sender, void*, smx_process_t) (rdv, void*, smx_mailbox_t) (task_size, double) (rate, double) (src_buff, void*) (src_buff_size, size_t) (match_fun, FPtr, simix_match_func_t) (clean_fun, FPtr, simix_clean_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (detached, int)
Blck H comm_recv (void)                  (receiver, void*, smx_process_t) (rdv, void*, smx_mailbox_t) (dst_buff, void*) (dst_buff_size, void*, size_t*) (match_fun, FPtr, simix_match_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (timeout, double) (rate, double)
Func H comm_irecv (void*, smx_synchro_t) (receiver, void*, smx_process_t) (rdv, void*, smx_mailbox_t) (dst_buff, void*) (dst_buff_size, void*, size_t*) (match_fun, FPtr, simix_match_func_t) (copy_data_fun, FPtr, simix_copy_data_func_t) (data, void*) (rate, double)
Proc - comm_cancel (void) (comm, void*, smx_synchro_t)
Blck H comm_waitany (int) (comms, void*, xbt_dynar_t)
Blck H comm_wait (void) (comm, void*, smx_synchro_t) (timeout, double)
Blck H comm_test (int) (comm, void*, smx_synchro_t)
Blck H comm_testany (int) (comms, void*, xbt_dynar_t)
Func - comm_get_remains (double) (comm, void*, smx_synchro_t)
Func - comm_get_state (int, e_smx_state_t) (comm, void*, smx_synchro_t)
Func - comm_get_src_data (void*) (comm, void*, smx_synchro_t)
Func - comm_get_dst_data (void*) (comm, void*, smx_synchro_t)
Func - comm_get_src_proc (void*, smx_process_t) (comm, void*, smx_synchro_t)
Func - comm_get_dst_proc (void*, smx_process_t) (comm, void*, smx_synchro_t)

Func H mutex_init (void*, smx_mutex_t)
Blck H mutex_lock (void) (mutex, void*, smx_mutex_t)
Func H mutex_trylock (int) (mutex, void*, smx_mutex_t)
Proc H mutex_unlock (void) (mutex, void*, smx_mutex_t)

Func - cond_init (void*, smx_cond_t)
Proc - cond_signal (void) (cond, void*, smx_cond_t)
Blck H cond_wait (void) (cond, void*, smx_cond_t) (mutex, void*, smx_mutex_t)
Blck H cond_wait_timeout (void) (cond, void*, smx_cond_t) (mutex, void*, smx_mutex_t) (timeout, double)
Proc - cond_broadcast (void) (cond, void*, smx_cond_t)

Func - sem_init (void*, smx_sem_t) (capacity, unsigned int)
Proc H sem_release (void) (sem, void*, smx_sem_t)
Func H sem_would_block (int) (sem, void*, smx_sem_t)
Blck H sem_acquire (void) (sem, void*, smx_sem_t)
Blck H sem_acquire_timeout (void) (sem, void*, smx_sem_t) (timeout, double)
Func H sem_get_capacity (int) (sem, void*, smx_sem_t)

Blck H file_read (sg_size_t) (fd, void*, smx_file_t) (size, sg_size_t) (host, void*, sg_host_t)
Blck H file_write (sg_size_t) (fd, void*, smx_file_t) (size, sg_size_t) (host, void*, sg_host_t)
Blck H file_open (void*, smx_file_t) (fullpath, const char*) (host, void*, sg_host_t)
Blck H file_close (int) (fd, void*, smx_file_t) (host, void*, sg_host_t)
Func - file_unlink (int) (fd, void*, smx_file_t) (host, void*, sg_host_t)
Func H file_get_size (sg_size_t) (fd, void*, smx_file_t)
Func H file_tell (sg_size_t) (fd, void*, smx_file_t)
Func H file_seek (int) (fd, void*, smx_file_t) (offset, sg_offset_t) (origin, int)
Func H file_get_info (void*, xbt_dynar_t) (fd, void*, smx_file_t)
Func H file_move (int) (fd, void*, smx_file_t) (fullpath, const char*)

Func H storage_get_free_size (sg_size_t) (storage, void*, smx_storage_t)
Func H storage_get_used_size (sg_size_t) (name, void*, smx_storage_t)
Func - storage_get_properties (void*, xbt_dict_t) (storage, void*, smx_storage_t)
Func - storage_get_content (void*, xbt_dict_t) (storage, void*, smx_storage_t)

Func H asr_get_properties (void*, xbt_dict_t) (name, const char*)
Func H mc_random (int) (min, int) (max, int)
Proc - set_category (void) (synchro, void*, smx_synchro_t) (category, const char*)

Proc - run_kernel (void) (code, void*)

## HAVE_LATENCY_BOUND_TRACKING
Func - comm_is_latency_bounded (int) (comm, void*, smx_synchro_t)
## HAVE_MC
Func H mc_snapshot (void*, mc_snapshot_t)
Func H mc_compare_snapshots (int) (s1, void*, mc_snapshot_t) (s2, void*, mc_snapshot_t)
