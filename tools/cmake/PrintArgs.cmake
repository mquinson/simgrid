if(enable_print_message)
  message("")
  message("______________________________________________________________________")
  message("______________________________________________________________________ DEBUG")
  message("CMAKE_HOME_DIRECTORY ........: ${CMAKE_HOME_DIRECTORY}")
  message("")
  message("PTH_STACKGROWTH .............: ${PTH_STACKGROWTH}")
  message("HAVE_VA_COPY ................: ${HAVE_VA_COPY}")
  message("")
  message("\#define pth_skaddr_makecontext(skaddr,sksize) (${makecontext_addr})")
  message("\#define pth_sksize_makecontext(skaddr,sksize) (${makecontext_size})")
  message("\#define __VA_COPY_USE          ${__VA_COPY_USE}")
  message("HAVE_UCONTEXT ...............: ${HAVE_UCONTEXT}")
  message("")
  message("HAVE_PTHREAD ................: ${HAVE_PTHREAD}")
  message("HAVE_SEM_INIT ...............: ${HAVE_SEM_INIT_LIB}")
  message("HAVE_SEM_TIMEDWAIT ..........: ${HAVE_SEM_TIMEDWAIT_LIB}")
  message("HAVE_MUTEX_TIMEDLOCK ........: ${HAVE_MUTEX_TIMEDLOCK_LIB}")
  message("HAVE_POSIX_GETTIME ..........: ${HAVE_POSIX_GETTIME}")
  message("")
  message("STDC_HEADERS ................: ${STDC_HEADERS}")
  message("HAVE_VALGRIND_VALGRIND_H ....: ${HAVE_VALGRIND_VALGRIND_H}")
  message("HAVE_SYS_STAT_H .............: ${HAVE_SYS_STAT_H}")
  message("HAVE_WINDOWS_H ..............: ${HAVE_WINDOWS_H}")
  message("HAVE_ERRNO_H ................: ${HAVE_ERRNO_H}")
  message("HAVE_UNISTD_H ...............: ${HAVE_UNISTD_H}")
  message("HAVE_EXECINFO_H .............: ${HAVE_EXECINFO_H}")
  message("HAVE_SIGNAL_H ...............: ${HAVE_SIGNAL_H}")
  message("HAVE_SYS_TIME_H .............: ${HAVE_SYS_TIME_H}")
  message("HAVE_TIME_H .................: ${HAVE_TIME_H}")
  message("HAVE_DLFCN_H ................: ${HAVE_DLFCN_H}")

  message("")
  message("HAVE_GETTIMEOFDAY ...........: ${HAVE_GETTIMEOFDAY}")
  message("HAVE_NANOSLEEP ..............: ${HAVE_NANOSLEEP}")
  message("HAVE_GETDTABLESIZE ..........: ${HAVE_GETDTABLESIZE}")
  message("HAVE_SYSCONF ................: ${HAVE_SYSCONF}")
  message("HAVE_POPEN ..................: ${HAVE_POPEN}")
  message("HAVE_MAKECONTEXT ............: ${HAVE_MAKECONTEXT}")
  message("HAVE_VASPRINTF ..............: ${HAVE_VASPRINTF}")
  message("HAVE_MMAP ...................: ${HAVE_MMAP}")
  message("HAVE_PRIVATIZATION ..........: ${HAVE_PRIVATIZATION}")
  message("HAVE_PROCESS_VM_READV .......: ${HAVE_PROCESS_VM_READV}")
  message("HAVE_THREAD_LOCAL_STORAGE ...: ${HAVE_THREAD_LOCAL_STORAGE}")
  message("HAVE_MMALLOC ................: ${HAVE_MMALLOC}")
  message("")
  message("HAVE_THREAD_CONTEXTS .............: ${HAVE_THREAD_CONTEXTS}")
  message("HAVE_UCONTEXT_CONTEXTS ............: ${HAVE_UCONTEXT_CONTEXTS}")
  message("______________________________________________________________________")
  message("______________________________________________________________________ DEBUG END")
  message("")
endif()

message("\nConfiguration of package `simgrid':")
message("        BUILDNAME ...................: ${BUILDNAME}")
message("        SITE ........................: ${SITE}")
if(release)
  message("        Release .....................: simgrid-${release_version}${SIMGRID_VERSION_EXTRA} (release build)")
else()
  message("        Release .....................: simgrid-${release_version}${SIMGRID_VERSION_EXTRA} (development build)")
endif()
message("")
message("        Compiler: C .................: ${CMAKE_C_COMPILER} (${CMAKE_C_COMPILER_ID})")
message("                version .............: ${CMAKE_C_COMPILER_VERSION}")
if(CMAKE_CXX_COMPILER)
  message("        Compiler: C++ ...............: ${CMAKE_CXX_COMPILER} (${CMAKE_CXX_COMPILER_ID})")
  message("                version .............: ${CMAKE_CXX_COMPILER_VERSION}")
endif()
if(${Java_FOUND})
  message("        Compiler: Javac .............: ${Java_JAVAC_EXECUTABLE}")
  message("                version .............: ${Java_VERSION_STRING}")
if(${SWIG_FOUND})
  message("                SWIG ................: Version ${SWIG_VERSION} found.")
else()
  message("                SWIG ................: Missing.")
endif()
endif()
if(CMAKE_Fortran_COMPILER)
  message("        Compiler: Fortran ...........: ${CMAKE_Fortran_COMPILER} (${CMAKE_Fortran_COMPILER_ID})")
  message("                version .............: ${CMAKE_Fortran_COMPILER_VERSION}")
endif()
message("        Linker: .....................: ${CMAKE_LINKER}")
message("                version .............: ${LINKER_VERSION}")
message("")
message("        CFlags ......................: ${CMAKE_C_FLAGS}")
message("        CXXFlags ....................: ${CMAKE_CXX_FLAGS}")
message("        LDFlags .....................: ${CMAKE_C_LINK_FLAGS}")
message("        with LTO ....................: ${enable_lto}")
message("")

if (HAVE_NS3)
  message("        Compile NS-3 ................: yes (path: ${NS3_PATH})")
else()
  message("        Compile NS-3 ................: NO  (hint: ${NS3_HINT})")
endif()

if (${Java_FOUND})
  message("        Compile Java ................: yes")
  message("          Native lib in jar .........: ${enable_lib_in_jar}")
else()
  message("        Compile Java ................: NO")
endif()
message("        Compile Scala................: ${HAVE_Scala}")
message("        Compile Lua .................: ${HAVE_LUA}")
message("        Compile Smpi ................: ${HAVE_SMPI}")
message("        Compile MPI testsuite .......: ${enable_smpi_MPICH3_testsuite}")
message("        Compile Smpi f77 ............: ${SMPI_FORTRAN}")
message("        Compile Smpi f90 ............: ${SMPI_FORTRAN}")
message("        Compile Boost.Context support: ${HAVE_BOOST_CONTEXTS}")
message("")
message("        Maintainer mode .............: ${enable_maintainer_mode}")
message("        Documentation................: ${enable_documentation}")
message("        Model checking ..............: ${HAVE_MC}")
message("        Tracing mode ................: ${enable_tracing}")
message("        Jedule  mode ................: ${enable_jedule}")
message("        Latency bound ...............: ${enable_latency_bound_tracking}")
message("        Graphviz mode ...............: ${HAVE_GRAPHVIZ}")
message("        Sigc++ mode .................: ${SIMGRID_HAVE_LIBSIG}")
message("        Mallocators .................: ${enable_mallocators}")
message("")
message("        Simgrid dependencies ........: ${SIMGRID_DEP}")
message("")
message("        INSTALL_PREFIX ..............: ${CMAKE_INSTALL_PREFIX}")

exec_program("${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/Testing/Notes/" OUTPUT_VARIABLE OKIDOKI)
file(WRITE ${PROJECT_BINARY_DIR}/Testing/Notes/Build  "GIT version : ${GIT_VERSION}\n")
file(APPEND ${PROJECT_BINARY_DIR}/Testing/Notes/Build "Release     : simgrid-${release_version}\n")
